{
  "input": {
    "name": "Основы JavaScript",
    "category": "course",
    "description": "Здесь вы можете изучить JavaScript, начиная с нуля и заканчивая продвинутыми концепциями вроде ООП. Мы сосредоточимся на самом языке, изредка добавляя заметки о средах его исполнения.",
    "preview": "Перед вами учебник по JavaScript, начиная с основ, включающий в себя много тонкостей и фишек JavaScript/DOM.",
    "lessons": [
      {
        "name": "Привет, мир!",
        "content": [
          {
            "id": 1,
            "type": "text",
            "orderBy": 1,
            "content": "В этой части учебника мы изучаем собственно JavaScript, сам язык."
          },
          {
            "id": 2,
            "type": "text",
            "orderBy": 2,
            "content": "Но нам нужна рабочая среда для запуска наших скриптов, и, поскольку это онлайн-книга, то браузер будет хорошим выбором. В этой главе мы сократим количество специфичных для браузера команд (например, alert) до минимума, чтобы вы не тратили на них время, если планируете сосредоточиться на другой среде (например, Node.js). А на использовании JavaScript в браузере мы сосредоточимся в следующей части учебника."
          },
          {
            "id": 3,
            "type": "text",
            "orderBy": 3,
            "content": "Итак, сначала давайте посмотрим, как выполнить скрипт на странице. Для серверных сред (например, Node.js), вы можете выполнить скрипт с помощью команды типа 'node my.js'. Для браузера всё немного иначе."
          },
          {
            "id": 4,
            "type": "title",
            "orderBy": 4,
            "content": "Тег «script»"
          },
          {
            "id": 5,
            "type": "text",
            "orderBy": 5,
            "content": "Программы на JavaScript могут быть вставлены в любое место HTML-документа с помощью тега <script>."
          },
          {
            "id": 6,
            "type": "text",
            "orderBy": 6,
            "content": "Для примера:"
          },
          {
            "id": 7,
            "type": "prism",
            "orderBy": 7,
            "content": "<script>\n   alert( 'Привет, мир!' );\n</script>\n"
          },
          {
            "id": 7,
            "type": "text",
            "orderBy": 7,
            "content": "Вы можете запустить пример, нажав на кнопку «Play» в правом верхнем углу блока с кодом выше."
          },
          {
            "id": 8,
            "type": "text",
            "orderBy": 8,
            "content": "Тег <script> содержит JavaScript-код, который автоматически выполнится, когда браузер его обработает."
          },
          {
            "id": 9,
            "type": "title",
            "orderBy": 9,
            "content": "Итого"
          },
          {
            "id": 10,
            "type": "text",
            "orderBy": 10,
            "content": "Нам ещё многое предстоит изучить про браузерные скрипты и их взаимодействие со страницей. Но, как уже было сказано, эта часть учебника посвящена именно языку JavaScript, поэтому здесь мы постараемся не отвлекаться на детали реализации в браузере. Мы воспользуемся браузером для запуска JavaScript, это удобно для онлайн-демонстраций, но это только одна из платформ, на которых работает этот язык."
          }
        ],
        "orderBy": 1
      },
      {
        "name": "Структура кода",
        "content": [
          {
            "id": 1,
            "type": "text",
            "orderBy": 1,
            "content": "Начнём изучение языка с рассмотрения основных «строительных блоков» кода."
          },
          {
            "id": 2,
            "type": "text",
            "orderBy": 2,
            "content": "Инструкции – это синтаксические конструкции и команды, которые выполняют действия."
          },
          {
            "id": 3,
            "type": "text",
            "orderBy": 3,
            "content": "Мы уже видели инструкцию alert('Привет, мир!'), которая отображает сообщение «Привет, мир!»."
          },
          {
            "id": 4,
            "type": "title",
            "orderBy": 4,
            "content": "Точка с запятой"
          },
          {
            "id": 5,
            "type": "text",
            "orderBy": 5,
            "content": "В большинстве случаев точку с запятой можно не ставить, если есть переход на новую строку."
          },
          {
            "id": 6,
            "type": "text",
            "orderBy": 6,
            "content": "Так тоже будет работать:"
          },
          {
            "id": 7,
            "type": "prism",
            "orderBy": 7,
            "content": "alert('Привет')\nalert('Мир')\n"
          },
          {
            "id": 7,
            "type": "text",
            "orderBy": 7,
            "content": "В этом случае JavaScript интерпретирует перенос строки как «неявную» точку с запятой. Это называется автоматическая вставка точки с запятой."
          },
          {
            "id": 8,
            "type": "text",
            "orderBy": 8,
            "content": "В большинстве случаев новая строка подразумевает точку с запятой. Но «в большинстве случаев» не значит «всегда»!"
          },
          {
            "id": 9,
            "type": "prism",
            "orderBy": 9,
            "content": "alert(3 +\n1\n+ 2);"
          },
          {
            "id": 10,
            "type": "text",
            "orderBy": 10,
            "content": "Комментарии увеличивают размер кода, но это не проблема. Есть множество инструментов, которые минифицируют код перед публикацией на рабочий сервер. Они убирают комментарии, так что они не содержатся в рабочих скриптах. Таким образом, комментарии никоим образом не вредят рабочему коду."
          }
        ],
        "orderBy": 2
      },
      {
        "name": "Строгий режим — 'use strict'",
        "content": [
          {
            "id": 1,
            "type": "text",
            "orderBy": 1,
            "content": "На протяжении долгого времени JavaScript развивался без проблем с обратной совместимостью. Новые функции добавлялись в язык, в то время как старая функциональность не менялась."
          },
          {
            "id": 2,
            "type": "text",
            "orderBy": 2,
            "content": "Преимуществом данного подхода было то, что существующий код продолжал работать. А недостатком – что любая ошибка или несовершенное решение, принятое создателями JavaScript, застревали в языке навсегда."
          },
          {
            "id": 3,
            "type": "text",
            "orderBy": 3,
            "content": "Так было до 2009 года, когда появился ECMAScript 5 (ES5). Он добавил новые возможности в язык и изменил некоторые из существующих. Чтобы устаревший код работал, как и раньше, по умолчанию подобные изменения не применяются. Поэтому нам нужно явно их активировать с помощью специальной директивы: 'use strict.'"
          },
          {
            "id": 4,
            "type": "title",
            "orderBy": 4,
            "content": "«use strict»"
          },
          {
            "id": 5,
            "type": "text",
            "orderBy": 5,
            "content": "Директива выглядит как строка: 'use strict' или 'use strict'. Когда она находится в начале скрипта, весь сценарий работает в «современном» режиме."
          },
          {
            "id": 6,
            "type": "text",
            "orderBy": 6,
            "content": "Например:"
          },
          {
            "id": 7,
            "type": "prism",
            "orderBy": 7,
            "content": "'use strict';\n\n// этот код работает в современном режиме"
          },
          {
            "id": 7,
            "type": "text",
            "orderBy": 7,
            "content": "Позже мы изучим функции (способ группировки команд). Забегая вперёд, заметим, что вместо всего скрипта 'use strict' можно поставить в начале большинства видов функций. Это позволяет включить строгий режим только в конкретной функции. Но обычно люди используют его для всего файла."
          },
          {
            "id": 8,
            "type": "text",
            "orderBy": 8,
            "content": "В большинстве браузеров, включая Chrome и Firefox, это работает."
          },
          {
            "id": 9,
            "type": "prism",
            "orderBy": 9,
            "content": "(function(){\n  'use strict';\n\n   // ...ваш код...\n})()"
          },
          {
            "id": 10,
            "type": "text",
            "orderBy": 10,
            "content": "Все примеры в этом учебнике подразумевают исполнение в строгом режиме, за исключением случаев (очень редких), когда оговорено иное."
          }
        ],
        "orderBy": 3
      },
      {
        "name": "Переменные",
        "content": [
          {
            "id": 1,
            "type": "text",
            "orderBy": 1,
            "content": "JavaScript-приложению обычно нужно работать с информацией. Например:"
          },
          {
            "id": 2,
            "type": "text",
            "orderBy": 2,
            "content": "1. Интернет-магазин – информация может включать продаваемые товары и корзину покупок."
          },
          {
            "id": 3,
            "type": "text",
            "orderBy": 3,
            "content": "2. Чат – информация может включать пользователей, сообщения и многое другое."
          },
          {
            "id": 4,
            "type": "title",
            "orderBy": 4,
            "content": "Переменная"
          },
          {
            "id": 5,
            "type": "text",
            "orderBy": 5,
            "content": "Переменная – это «именованное хранилище» для данных. Мы можем использовать переменные для хранения товаров, посетителей и других данных."
          },
          {
            "id": 6,
            "type": "text",
            "orderBy": 6,
            "content": "Приведённая ниже инструкция создаёт (другими словами: объявляет или определяет) переменную с именем «message»:"
          },
          {
            "id": 7,
            "type": "prism",
            "orderBy": 7,
            "content": "let message;"
          },
          {
            "id": 7,
            "type": "text",
            "orderBy": 7,
            "content": "Строка сохраняется в области памяти, связанной с переменной. Мы можем получить к ней доступ, используя имя переменной:"
          },
          {
            "id": 8,
            "type": "prism",
            "orderBy": 8,
            "content": "let message;\nmessage = 'Hello!';\n\n alert(message); // показывает содержимое переменной"
          },
          {
            "id": 9,
            "type": "text",
            "orderBy": 9,
            "content": "Для краткости можно совместить объявление переменной и запись данных в одну строку:"
          },
          {
            "id": 10,
            "type": "prism",
            "orderBy": 10,
            "content": "let user = 'John', age = 25, message = 'Hello';"
          },
          {
            "id": 11,
            "type": "text",
            "orderBy": 11,
            "content": "Такой способ может показаться короче, но мы не рекомендуем его. Для лучшей читаемости объявляйте каждую переменную на новой строке."
          }
        ],
        "orderBy": 4
      },
      {
        "name": "Типы данных",
        "content": [
          {
            "id": 1,
            "type": "text",
            "orderBy": 1,
            "content": "Значение в JavaScript всегда относится к данным определённого типа. Например, это может быть строка или число."
          },
          {
            "id": 2,
            "type": "text",
            "orderBy": 2,
            "content": "Есть восемь основных типов данных в JavaScript. В этой главе мы рассмотрим их в общем, а в следующих главах поговорим подробнее о каждом."
          },
          {
            "id": 3,
            "type": "text",
            "orderBy": 3,
            "content": "Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число:"
          },
          {
            "id": 4,
            "type": "title",
            "orderBy": 4,
            "content": "Число"
          },
          {
            "id": 5,
            "type": "prism",
            "orderBy": 5,
            "content": "let n = 123;\nn = 12.345;"
          },
          {
            "id": 6,
            "type": "text",
            "orderBy": 6,
            "content": "Числовой тип данных (number) представляет как целочисленные значения, так и числа с плавающей точкой."
          },
          {
            "id": 7,
            "type": "prism",
            "orderBy": 7,
            "content": "alert( 1 / 0 ); // Infinity"
          },
          {
            "id": 7,
            "type": "text",
            "orderBy": 7,
            "content": "Или задать его явно:"
          },
          {
            "id": 8,
            "type": "prism",
            "orderBy": 8,
            "content": "alert( Infinity ); // Infinity"
          },
          {
            "id": 9,
            "type": "text",
            "orderBy": 9,
            "content": "NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции, например:"
          },
          {
            "id": 10,
            "type": "prism",
            "orderBy": 10,
            "content": "alert( 'не число' / 2 );"
          },
          {
            "id": 11,
            "type": "text",
            "orderBy": 11,
            "content": "Такой способ может показаться короче, но мы не рекомендуем его. Для лучшей читаемости объявляйте каждую переменную на новой строке."
          }
        ],
        "orderBy": 5
      }
    ]
  }
}
